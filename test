export default function Movies(){
    const [movies, setState] = useState([]);

    useEffect(()=>{
        async function getMovies(){
            const response = await axios.get(
                `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=hulk&page=1$include_adult=false`
            );
            console.log('hello');
            console.log(response.data.results)
            setState(response.data.results)
        }
        getMovies();
    },[]);

    const search = searchValue => {
        let response = axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${searchValue}hulk&page=1$include_adult=false`)
          setState(response.data.resutls)
          };


    return(
        <>
        <Search  search={search}/>
        <div className="product-list">
            {
                movies.map(movie=>(
                    <Movie key={movie.id} movie={movie} />
                ))
            }
        </div>
    </>
    );

--------------------------------------------------------------->>>

export default function Movies(){
    const [movies, setMovies] = useState([])
    const [search, setSearch] = useState("");
    const focusSearch = useRef(null);


    useEffect(() => {focusSearch.current.focus()}, [])

    const getMovies =async(search)=>{
        const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${search}hulk&page=1$include_adult=false`)
        const movieData = await response.json()
        return movieData.response
    } 
    
    const sleep =(ms)=>{
        return new Promise(resolve=>setTimeout(resolve,ms))
    }

    useEffect(() => {
        let currentSearch = true;
        const controller = new AbortController();

        const loadMovies = async()=>{
            if(!search) return setMovies([]);
            
            await sleep(350)
            if(currentSearch){
                const movies = await getMovies(search, controller)
                setMovies(movies)
            };
        }
        loadMovies();

        return () => {
            currentSearch=false;
            controller.abort()
        };

    }, [search]);


    let moviesComponent = movies.map(movie =>{
        return(
            <Movies key={movie.id} movie={movie} >
                {movie.movie}
            </Movies>
        )
    })

    return(
        <>
        {/* <Search  search={search}/> */}

        <div>
            <div className="container justify-content-center mr-5 pt-5" >
                <div className="row">
                    <input type="text"
                        ref={focusSearch}
                        value={search}
                        onChange={(e)=>setSearch(e.target.value)}
                        placeholder="procure seu filme"
                        style={{width:'50%'}}
                        
                    />
            </div>
            </div>
        </div>

        <div className="product-list">
          {moviesComponent}
        </div>
    </>
    );

}

